@use "sass:selector";

@use "sass:string";
@use "sass:meta";

@use "./config" as *;

// Selector of component.
//
// @access private
//
// @param {String} $component - Name of component that will come after ".c-"
// @param {String} $namespace - Namespace of component.
//
// @returns {String} - .c-[component]
//
// @see {mixin} component

@function component-selector($component, $namespace) {
  @return string.unquote(".#{$namespace}-#{$component}");
}

// @alias component-selector

@function c-selector($component) {
  @return component-selector($component);
}

// Selector of block.
//
// @access private
//
// @param {String} $block - Name of block that will come after "."
//
// @returns {String} - .[block]
//
// @see {mixin} block

@function block-selector($block) {
  @return string.unquote(".#{$block}");
}

// @alias block-selector

@function b-selector($block) {
  @return block-selector($block);
}

// Selector of element.
//
// @access private
//
// @param {String} $element - Name of element that will come after ".[block]__"
// @param {Boolean} $nested [false] - If element is nested with another element
//
// @returns {String} - .[block]__[element]
//
// @see {mixin} element

@function element-selector($element, $nested: false) {
  $selector: "";
  $parent: string.unquote("#{&}");

  @if ($nested == true) {
    $selector: string.unquote("&#{$bem-element-separator}#{$element}");
  } @else {
    @if (is-block($parent)) {
      $selector: string.unquote("&#{$bem-element-separator}#{$element}");
    } @else {
      $block: get-block($parent);
      $selector: string.unquote(
        "& .#{$block}#{$bem-element-separator}#{$element}"
      );
    }

    @if (meta.type-of($element) == "list") {
      $selector: ();

      @each $value in $element {
        $current: "";

        @if (is-block($parent)) {
          $current: string.unquote("&#{$bem-element-separator}#{$value}");
        } @else {
          $block: get-block($parent);
          $current: string.unquote(
            "& .#{$block}#{$bem-element-separator}#{$value}"
          );
        }

        $selector: selector.append($selector, $current, comma);
      }
    }
  }

  @return $selector;
}

// @alias element-selector

@function e-selector($element) {
  @return element-selector($element);
}

// @alias element-selector

@function ee-selector($element) {
  @return element-selector($element, true);
}

// Selector of modifier.
//
// @access private
//
// @param {String} $modifier - Name of modifier that will come after ".[block]--"
//
// @returns {String} - .[block]--[modifier]
//
// @see {mixin} modifier

@function modifier-selector($modifier) {
  $selector: string.unquote("&#{$bem-modifier-separator}#{$modifier}");

  @if (meta.type-of($modifier) == "list") {
    $selector: ();

    @each $value in $modifier {
      $current: string.unquote("&#{$bem-modifier-separator}#{$value}");
      $selector: selector.append($selector, $current, comma);
    }
  }

  @return $selector;
}

// @alias modifier-selector

@function m-selector($modifier) {
  @return modifier-selector($modifier);
}

// Pseudo selector with end of first-of-type.
//
// @access private
//
// @returns {String} - &:first-of-type
//
// @see {mixin} first

@function first-selector() {
  @return string.unquote("&:first-of-type");
}

// Pseudo selector with end of last-of-type.
//
// @access private
//
// @returns {String} - &:last-of-type
//
// @see {mixin} last

@function last-selector() {
  @return string.unquote("&:last-of-type");
}

// Pseudo selector with end of nth-child(even).
//
// @access private
//
// @returns {String} - &:nth-child(even)
//
// @see {mixin} even

@function even-selector() {
  @return string.unquote("&:nth-child(even)");
}

// Pseudo selector with end of nth-child(odd).
//
// @access private
//
// @returns {String} - &:nth-child(odd)
//
// @see {mixin} odd

@function odd-selector() {
  @return string.unquote("&:nth-child(odd)");
}

// Pseudo selector with end of before.
//
// @access private
//
// @returns {String} - &::before
//
// @see {mixin} before

@function before-selector() {
  @return string.unquote("&::before");
}

// Pseudo selector with end of after.
//
// @access private
//
// @returns {String} - &::after
//
// @see {mixin} after

@function after-selector() {
  @return string.unquote("&::after");
}

// Selector of state.
//
// @access private
//
// @param {String} $state - Name of state that will come after ".[is|has|js]-"
// @param {String} $namespace [null] - Namespace of state. [is|has|js]
//
// @returns {String} - .[is|has|js]-[state]
//
// @see {mixin} state

@function state-selector($state, $namespace: null) {
  $selector: string.unquote("&.#{$state}");

  //
  @if $namespace != null {
    $selector: string.unquote("&.#{$namespace}-#{$state}");
  }

  @return $selector;
}

// @alias state-selector

@function is-selector($state) {
  @return state-selector($state, "is");
}

// @alias state-selector

@function has-selector($state) {
  @return state-selector($state, "has");
}

// @alias state-selector

@function js-selector($state) {
  @return state-selector($state, "js");
}

// Pseudo selector with end of hover.
//
// @access private
//
// @returns {String} - &:hover
//
// @see {mixin} hover

@function hover-selector() {
  @return string.unquote("&:hover");
}

// Pseudo selector with end of focus.
//
// @access private
//
// @returns {String} - &:focus
//
// @see {mixin} focus

@function focus-selector() {
  @return string.unquote("&:focus");
}

// Pseudo selector with end of active.
//
// @access private
//
// @returns {String} - &:active
//
// @see {mixin} active

@function active-selector() {
  @return string.unquote("&:active");
}

// Pseudo selector with end of link.
//
// @access private
//
// @returns {String} - &:link
//
// @see {mixin} link

@function link-selector() {
  @return string.unquote("&:link");
}

// Pseudo selector with end of visited.
//
// @access private
//
// @returns {String} - &:visited
//
// @see {mixin} visited

@function visited-selector() {
  @return string.unquote("&:visited");
}

// Pseudo selector with end of checked.
//
// @access private
//
// @returns {String} - &:checked
//
// @see {mixin} checked

@function checked-selector() {
  @return string.unquote("&:checked");
}

// Selector with state of disabled.
//
// @access private
//
// @returns {String} - &[disabled]
//
// @see {mixin} disabled

@function disabled-selector() {
  @return string.unquote("&[disabled]");
}

// Selector with state of readonly.
//
// @access private
//
// @returns {String} - &[readonly]
//
// @see {mixin} readonly

@function readonly-selector() {
  @return string.unquote("&[readonly]");
}

// Selector with state of contenteditable.
//
// @access private
//
// @returns {String} - &[contenteditable='true']
//
// @see {mixin} contenteditable

@function contenteditable-selector() {
  @return string.unquote("&[contenteditable='true']");
}

// @alias contenteditable-selector

@function editable-selector() {
  @return contenteditable-selector();
}

// Selector of theme.
//
// @access private
//
// @param {String} $theme - Name of theme that will come after ".t-"
// @param {String} $namespace - Namespace of theme.
//
// @returns {String} - .t-[theme]
//
// @see {mixin} theme

@function theme-selector($theme, $namespace) {
  @return string.unquote(".#{$namespace}-#{$theme}");
}

// @alias theme-selector

@function t-selector($theme) {
  @return theme-selector($theme);
}
